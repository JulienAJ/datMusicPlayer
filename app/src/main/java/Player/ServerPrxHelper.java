// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Player;

public final class ServerPrxHelper extends Ice.ObjectPrxHelperBase implements ServerPrx
{
    private static final String __addSong_name = "addSong";

    public void addSong(String name, String artist, String path)
    {
        addSong(name, artist, path, null, false);
    }

    public void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        addSong(name, artist, path, __ctx, true);
    }

    private void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.addSong(name, artist, path, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path)
    {
        return begin_addSong(name, artist, path, null, false, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        return begin_addSong(name, artist, path, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Callback_Server_addSong __cb)
    {
        return begin_addSong(name, artist, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Callback_Server_addSong __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSong_name, __cb);
        try
        {
            __result.__prepare(__addSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(artist);
            __os.writeString(path);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addSong(Ice.AsyncResult __result)
    {
        __end(__result, __addSong_name);
    }

    private static final String __findByAny_name = "findByAny";

    public song[] findByAny(String searchKey)
    {
        return findByAny(searchKey, null, false);
    }

    public song[] findByAny(String searchKey, java.util.Map<String, String> __ctx)
    {
        return findByAny(searchKey, __ctx, true);
    }

    private song[] findByAny(String searchKey, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findByAny", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findByAny");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.findByAny(searchKey, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findByAny(String searchKey)
    {
        return begin_findByAny(searchKey, null, false, null);
    }

    public Ice.AsyncResult begin_findByAny(String searchKey, java.util.Map<String, String> __ctx)
    {
        return begin_findByAny(searchKey, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findByAny(String searchKey, Ice.Callback __cb)
    {
        return begin_findByAny(searchKey, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByAny(String searchKey, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByAny(searchKey, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findByAny(String searchKey, Callback_Server_findByAny __cb)
    {
        return begin_findByAny(searchKey, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByAny(String searchKey, java.util.Map<String, String> __ctx, Callback_Server_findByAny __cb)
    {
        return begin_findByAny(searchKey, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findByAny(String searchKey, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByAny_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findByAny_name, __cb);
        try
        {
            __result.__prepare(__findByAny_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(searchKey);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public song[] end_findByAny(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findByAny_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            song[] __ret;
            __ret = songSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findByArtist_name = "findByArtist";

    public song[] findByArtist(String artist)
    {
        return findByArtist(artist, null, false);
    }

    public song[] findByArtist(String artist, java.util.Map<String, String> __ctx)
    {
        return findByArtist(artist, __ctx, true);
    }

    private song[] findByArtist(String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findByArtist", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findByArtist");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.findByArtist(artist, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findByArtist(String artist)
    {
        return begin_findByArtist(artist, null, false, null);
    }

    public Ice.AsyncResult begin_findByArtist(String artist, java.util.Map<String, String> __ctx)
    {
        return begin_findByArtist(artist, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findByArtist(String artist, Ice.Callback __cb)
    {
        return begin_findByArtist(artist, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByArtist(String artist, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByArtist(artist, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findByArtist(String artist, Callback_Server_findByArtist __cb)
    {
        return begin_findByArtist(artist, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByArtist(String artist, java.util.Map<String, String> __ctx, Callback_Server_findByArtist __cb)
    {
        return begin_findByArtist(artist, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findByArtist(String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByArtist_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findByArtist_name, __cb);
        try
        {
            __result.__prepare(__findByArtist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(artist);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public song[] end_findByArtist(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findByArtist_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            song[] __ret;
            __ret = songSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findByBoth_name = "findByBoth";

    public song findByBoth(String title, String artist)
    {
        return findByBoth(title, artist, null, false);
    }

    public song findByBoth(String title, String artist, java.util.Map<String, String> __ctx)
    {
        return findByBoth(title, artist, __ctx, true);
    }

    private song findByBoth(String title, String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findByBoth", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findByBoth");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.findByBoth(title, artist, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist)
    {
        return begin_findByBoth(title, artist, null, false, null);
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist, java.util.Map<String, String> __ctx)
    {
        return begin_findByBoth(title, artist, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist, Ice.Callback __cb)
    {
        return begin_findByBoth(title, artist, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByBoth(title, artist, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist, Callback_Server_findByBoth __cb)
    {
        return begin_findByBoth(title, artist, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByBoth(String title, String artist, java.util.Map<String, String> __ctx, Callback_Server_findByBoth __cb)
    {
        return begin_findByBoth(title, artist, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findByBoth(String title, String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByBoth_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findByBoth_name, __cb);
        try
        {
            __result.__prepare(__findByBoth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(title);
            __os.writeString(artist);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public song end_findByBoth(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findByBoth_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            song __ret;
            __ret = new song();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findByTitle_name = "findByTitle";

    public song[] findByTitle(String name)
    {
        return findByTitle(name, null, false);
    }

    public song[] findByTitle(String name, java.util.Map<String, String> __ctx)
    {
        return findByTitle(name, __ctx, true);
    }

    private song[] findByTitle(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findByTitle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findByTitle");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.findByTitle(name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findByTitle(String name)
    {
        return begin_findByTitle(name, null, false, null);
    }

    public Ice.AsyncResult begin_findByTitle(String name, java.util.Map<String, String> __ctx)
    {
        return begin_findByTitle(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findByTitle(String name, Ice.Callback __cb)
    {
        return begin_findByTitle(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByTitle(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByTitle(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findByTitle(String name, Callback_Server_findByTitle __cb)
    {
        return begin_findByTitle(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByTitle(String name, java.util.Map<String, String> __ctx, Callback_Server_findByTitle __cb)
    {
        return begin_findByTitle(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findByTitle(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByTitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findByTitle_name, __cb);
        try
        {
            __result.__prepare(__findByTitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public song[] end_findByTitle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findByTitle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            song[] __ret;
            __ret = songSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCount_name = "getCount";

    public int getCount()
    {
        return getCount(null, false);
    }

    public int getCount(java.util.Map<String, String> __ctx)
    {
        return getCount(__ctx, true);
    }

    private int getCount(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCount");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.getCount(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCount()
    {
        return begin_getCount(null, false, null);
    }

    public Ice.AsyncResult begin_getCount(java.util.Map<String, String> __ctx)
    {
        return begin_getCount(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCount(Ice.Callback __cb)
    {
        return begin_getCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCount(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCount(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCount(Callback_Server_getCount __cb)
    {
        return begin_getCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCount(java.util.Map<String, String> __ctx, Callback_Server_getCount __cb)
    {
        return begin_getCount(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCount(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCount_name, __cb);
        try
        {
            __result.__prepare(__getCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getCount(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getStreamingPort_name = "getStreamingPort";

    public String getStreamingPort()
    {
        return getStreamingPort(null, false);
    }

    public String getStreamingPort(java.util.Map<String, String> __ctx)
    {
        return getStreamingPort(__ctx, true);
    }

    private String getStreamingPort(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getStreamingPort", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getStreamingPort");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.getStreamingPort(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getStreamingPort()
    {
        return begin_getStreamingPort(null, false, null);
    }

    public Ice.AsyncResult begin_getStreamingPort(java.util.Map<String, String> __ctx)
    {
        return begin_getStreamingPort(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getStreamingPort(Ice.Callback __cb)
    {
        return begin_getStreamingPort(null, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamingPort(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStreamingPort(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getStreamingPort(Callback_Server_getStreamingPort __cb)
    {
        return begin_getStreamingPort(null, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamingPort(java.util.Map<String, String> __ctx, Callback_Server_getStreamingPort __cb)
    {
        return begin_getStreamingPort(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStreamingPort(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStreamingPort_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStreamingPort_name, __cb);
        try
        {
            __result.__prepare(__getStreamingPort_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getStreamingPort(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStreamingPort_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __list_name = "list";

    public song[] list()
    {
        return list(null, false);
    }

    public song[] list(java.util.Map<String, String> __ctx)
    {
        return list(__ctx, true);
    }

    private song[] list(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "list", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("list");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.list(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_list()
    {
        return begin_list(null, false, null);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx)
    {
        return begin_list(__ctx, true, null);
    }

    public Ice.AsyncResult begin_list(Ice.Callback __cb)
    {
        return begin_list(null, false, __cb);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_list(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_list(Callback_Server_list __cb)
    {
        return begin_list(null, false, __cb);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, Callback_Server_list __cb)
    {
        return begin_list(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__list_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __list_name, __cb);
        try
        {
            __result.__prepare(__list_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public song[] end_list(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __list_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            song[] __ret;
            __ret = songSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __play_name = "play";

    public void play(String id)
    {
        play(id, null, false);
    }

    public void play(String id, java.util.Map<String, String> __ctx)
    {
        play(id, __ctx, true);
    }

    private void play(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "play", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.play(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_play(String id)
    {
        return begin_play(id, null, false, null);
    }

    public Ice.AsyncResult begin_play(String id, java.util.Map<String, String> __ctx)
    {
        return begin_play(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_play(String id, Ice.Callback __cb)
    {
        return begin_play(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_play(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_play(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_play(String id, Callback_Server_play __cb)
    {
        return begin_play(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_play(String id, java.util.Map<String, String> __ctx, Callback_Server_play __cb)
    {
        return begin_play(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_play(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __play_name, __cb);
        try
        {
            __result.__prepare(__play_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_play(Ice.AsyncResult __result)
    {
        __end(__result, __play_name);
    }

    private static final String __read_name = "read";

    public byte[] read(String filename, int offset, int count)
    {
        return read(filename, offset, count, null, false);
    }

    public byte[] read(String filename, int offset, int count, java.util.Map<String, String> __ctx)
    {
        return read(filename, offset, count, __ctx, true);
    }

    private byte[] read(String filename, int offset, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "read", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("read");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.read(filename, offset, count, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count)
    {
        return begin_read(filename, offset, count, null, false, null);
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count, java.util.Map<String, String> __ctx)
    {
        return begin_read(filename, offset, count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count, Ice.Callback __cb)
    {
        return begin_read(filename, offset, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_read(filename, offset, count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count, Callback_Server_read __cb)
    {
        return begin_read(filename, offset, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_read(String filename, int offset, int count, java.util.Map<String, String> __ctx, Callback_Server_read __cb)
    {
        return begin_read(filename, offset, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_read(String filename, int offset, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__read_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __read_name, __cb);
        try
        {
            __result.__prepare(__read_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(filename);
            __os.writeInt(offset);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_read(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __read_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = ByteSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __remove_name = "remove";

    public void remove(String path)
    {
        remove(path, null, false);
    }

    public void remove(String path, java.util.Map<String, String> __ctx)
    {
        remove(path, __ctx, true);
    }

    private void remove(String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "remove", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.remove(path, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_remove(String path)
    {
        return begin_remove(path, null, false, null);
    }

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx)
    {
        return begin_remove(path, __ctx, true, null);
    }

    public Ice.AsyncResult begin_remove(String path, Ice.Callback __cb)
    {
        return begin_remove(path, null, false, __cb);
    }

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_remove(path, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_remove(String path, Callback_Server_remove __cb)
    {
        return begin_remove(path, null, false, __cb);
    }

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx, Callback_Server_remove __cb)
    {
        return begin_remove(path, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __remove_name, __cb);
        try
        {
            __result.__prepare(__remove_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(path);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_remove(Ice.AsyncResult __result)
    {
        __end(__result, __remove_name);
    }

    private static final String __start_name = "start";

    public String start(String path)
    {
        return start(path, null, false);
    }

    public String start(String path, java.util.Map<String, String> __ctx)
    {
        return start(path, __ctx, true);
    }

    private String start(String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "start", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("start");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.start(path, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_start(String path)
    {
        return begin_start(path, null, false, null);
    }

    public Ice.AsyncResult begin_start(String path, java.util.Map<String, String> __ctx)
    {
        return begin_start(path, __ctx, true, null);
    }

    public Ice.AsyncResult begin_start(String path, Ice.Callback __cb)
    {
        return begin_start(path, null, false, __cb);
    }

    public Ice.AsyncResult begin_start(String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_start(path, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_start(String path, Callback_Server_start __cb)
    {
        return begin_start(path, null, false, __cb);
    }

    public Ice.AsyncResult begin_start(String path, java.util.Map<String, String> __ctx, Callback_Server_start __cb)
    {
        return begin_start(path, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_start(String path, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__start_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __start_name, __cb);
        try
        {
            __result.__prepare(__start_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(path);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_start(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __start_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __stop_name = "stop";

    public void stop(String id)
    {
        stop(id, null, false);
    }

    public void stop(String id, java.util.Map<String, String> __ctx)
    {
        stop(id, __ctx, true);
    }

    private void stop(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.stop(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stop(String id)
    {
        return begin_stop(id, null, false, null);
    }

    public Ice.AsyncResult begin_stop(String id, java.util.Map<String, String> __ctx)
    {
        return begin_stop(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stop(String id, Ice.Callback __cb)
    {
        return begin_stop(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stop(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stop(String id, Callback_Server_stop __cb)
    {
        return begin_stop(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(String id, java.util.Map<String, String> __ctx, Callback_Server_stop __cb)
    {
        return begin_stop(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stop(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stop_name, __cb);
        try
        {
            __result.__prepare(__stop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stop(Ice.AsyncResult __result)
    {
        __end(__result, __stop_name);
    }

    private static final String __write_name = "write";

    public void write(String name, int offset, byte[] data)
    {
        write(name, offset, data, null, false);
    }

    public void write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx)
    {
        write(name, offset, data, __ctx, true);
    }

    private void write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "write", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.write(name, offset, data, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data)
    {
        return begin_write(name, offset, data, null, false, null);
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx)
    {
        return begin_write(name, offset, data, __ctx, true, null);
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data, Ice.Callback __cb)
    {
        return begin_write(name, offset, data, null, false, __cb);
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_write(name, offset, data, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data, Callback_Server_write __cb)
    {
        return begin_write(name, offset, data, null, false, __cb);
    }

    public Ice.AsyncResult begin_write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx, Callback_Server_write __cb)
    {
        return begin_write(name, offset, data, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_write(String name, int offset, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __write_name, __cb);
        try
        {
            __result.__prepare(__write_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeInt(offset);
            ByteSeqHelper.write(__os, data);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_write(Ice.AsyncResult __result)
    {
        __end(__result, __write_name);
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                ServerPrxHelper __h = new ServerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerPrxHelper __h = new ServerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Player::Server"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ServerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ServerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerPrxHelper result = new ServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
