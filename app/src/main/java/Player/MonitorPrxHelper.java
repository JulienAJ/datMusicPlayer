// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Player;

public final class MonitorPrxHelper extends Ice.ObjectPrxHelperBase implements MonitorPrx
{
    private static final String __newSong_name = "newSong";

    public void newSong(song s)
    {
        newSong(s, null, false);
    }

    public void newSong(song s, java.util.Map<String, String> __ctx)
    {
        newSong(s, __ctx, true);
    }

    private void newSong(song s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "newSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MonitorDel __del = (_MonitorDel)__delBase;
                    __del.newSong(s, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_newSong(song s)
    {
        return begin_newSong(s, null, false, null);
    }

    public Ice.AsyncResult begin_newSong(song s, java.util.Map<String, String> __ctx)
    {
        return begin_newSong(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_newSong(song s, Ice.Callback __cb)
    {
        return begin_newSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_newSong(song s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newSong(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_newSong(song s, Callback_Monitor_newSong __cb)
    {
        return begin_newSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_newSong(song s, java.util.Map<String, String> __ctx, Callback_Monitor_newSong __cb)
    {
        return begin_newSong(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newSong(song s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newSong_name, __cb);
        try
        {
            __result.__prepare(__newSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            s.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_newSong(Ice.AsyncResult __result)
    {
        __end(__result, __newSong_name);
    }

    private static final String __serverDown_name = "serverDown";

    public void serverDown()
    {
        serverDown(null, false);
    }

    public void serverDown(java.util.Map<String, String> __ctx)
    {
        serverDown(__ctx, true);
    }

    private void serverDown(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "serverDown", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MonitorDel __del = (_MonitorDel)__delBase;
                    __del.serverDown(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_serverDown()
    {
        return begin_serverDown(null, false, null);
    }

    public Ice.AsyncResult begin_serverDown(java.util.Map<String, String> __ctx)
    {
        return begin_serverDown(__ctx, true, null);
    }

    public Ice.AsyncResult begin_serverDown(Ice.Callback __cb)
    {
        return begin_serverDown(null, false, __cb);
    }

    public Ice.AsyncResult begin_serverDown(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_serverDown(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_serverDown(Callback_Monitor_serverDown __cb)
    {
        return begin_serverDown(null, false, __cb);
    }

    public Ice.AsyncResult begin_serverDown(java.util.Map<String, String> __ctx, Callback_Monitor_serverDown __cb)
    {
        return begin_serverDown(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_serverDown(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __serverDown_name, __cb);
        try
        {
            __result.__prepare(__serverDown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_serverDown(Ice.AsyncResult __result)
    {
        __end(__result, __serverDown_name);
    }

    private static final String __serverUp_name = "serverUp";

    public void serverUp()
    {
        serverUp(null, false);
    }

    public void serverUp(java.util.Map<String, String> __ctx)
    {
        serverUp(__ctx, true);
    }

    private void serverUp(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "serverUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MonitorDel __del = (_MonitorDel)__delBase;
                    __del.serverUp(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_serverUp()
    {
        return begin_serverUp(null, false, null);
    }

    public Ice.AsyncResult begin_serverUp(java.util.Map<String, String> __ctx)
    {
        return begin_serverUp(__ctx, true, null);
    }

    public Ice.AsyncResult begin_serverUp(Ice.Callback __cb)
    {
        return begin_serverUp(null, false, __cb);
    }

    public Ice.AsyncResult begin_serverUp(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_serverUp(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_serverUp(Callback_Monitor_serverUp __cb)
    {
        return begin_serverUp(null, false, __cb);
    }

    public Ice.AsyncResult begin_serverUp(java.util.Map<String, String> __ctx, Callback_Monitor_serverUp __cb)
    {
        return begin_serverUp(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_serverUp(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __serverUp_name, __cb);
        try
        {
            __result.__prepare(__serverUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_serverUp(Ice.AsyncResult __result)
    {
        __end(__result, __serverUp_name);
    }

    private static final String __songRemoved_name = "songRemoved";

    public void songRemoved(song s)
    {
        songRemoved(s, null, false);
    }

    public void songRemoved(song s, java.util.Map<String, String> __ctx)
    {
        songRemoved(s, __ctx, true);
    }

    private void songRemoved(song s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "songRemoved", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MonitorDel __del = (_MonitorDel)__delBase;
                    __del.songRemoved(s, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_songRemoved(song s)
    {
        return begin_songRemoved(s, null, false, null);
    }

    public Ice.AsyncResult begin_songRemoved(song s, java.util.Map<String, String> __ctx)
    {
        return begin_songRemoved(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_songRemoved(song s, Ice.Callback __cb)
    {
        return begin_songRemoved(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_songRemoved(song s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_songRemoved(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_songRemoved(song s, Callback_Monitor_songRemoved __cb)
    {
        return begin_songRemoved(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_songRemoved(song s, java.util.Map<String, String> __ctx, Callback_Monitor_songRemoved __cb)
    {
        return begin_songRemoved(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_songRemoved(song s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __songRemoved_name, __cb);
        try
        {
            __result.__prepare(__songRemoved_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            s.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_songRemoved(Ice.AsyncResult __result)
    {
        __end(__result, __songRemoved_name);
    }

    public static MonitorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MonitorPrx)
            {
                __d = (MonitorPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MonitorPrxHelper __h = new MonitorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MonitorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MonitorPrx)
            {
                __d = (MonitorPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MonitorPrxHelper __h = new MonitorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MonitorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MonitorPrxHelper __h = new MonitorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MonitorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MonitorPrxHelper __h = new MonitorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MonitorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MonitorPrx)
            {
                __d = (MonitorPrx)__obj;
            }
            else
            {
                MonitorPrxHelper __h = new MonitorPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MonitorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MonitorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MonitorPrxHelper __h = new MonitorPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Player::Monitor"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MonitorDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MonitorDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MonitorPrx v)
    {
        __os.writeProxy(v);
    }

    public static MonitorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MonitorPrxHelper result = new MonitorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
